import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding database with extensive demo data...')

  // Clean existing data
  await prisma.issueTimeline.deleteMany()
  await prisma.offer.deleteMany()
  await prisma.issue.deleteMany()
  await prisma.contract.deleteMany()
  await prisma.property.deleteMany()
  await prisma.provider.deleteMany()
  await prisma.tenant.deleteMany()
  await prisma.owner.deleteMany()
  await prisma.company.deleteMany()
  await prisma.user.deleteMany()

  // Create company
  const company = await prisma.company.create({
    data: {
      name: 'Molino RENTAL Kft.',
      taxNumber: '12345678-1-42',
      bankAccount: '12345678-12345678-12345678',
      street: 'V√°ci √∫t 1.',
      city: 'Budapest',
      postalCode: '1133',
      country: 'Magyarorsz√°g',
      settings: {
        currency: 'HUF',
        language: 'HU',
        timezone: 'Europe/Budapest',
        emailNotifications: true,
        email: 'info@molino-rental.hu',
        phone: '+36 1 234 5678',
        website: 'https://molino-rental.hu',
      },
    },
  })

  // Create users with different roles
  const adminPassword = await bcrypt.hash('admin123', 10)
  const userPassword = await bcrypt.hash('user123', 10)

  // Admin user
  const admin = await prisma.user.create({
    data: {
      email: 'admin@molino.com',
      password: adminPassword,
      firstName: 'Admin',
      lastName: 'Molino',
      role: 'ADMIN',
      language: 'HU',
      phone: '+36 20 123 4567',
    },
  })

  // Property owners
  const owner1 = await prisma.user.create({
    data: {
      email: 'nagy.istvan@example.com',
      password: userPassword,
      firstName: 'Nagy',
      lastName: 'Istv√°n',
      role: 'OWNER',
      language: 'HU',
      phone: '+36 30 111 2222',
    },
  })

  const owner2 = await prisma.user.create({
    data: {
      email: 'kovacs.maria@example.com',
      password: userPassword,
      firstName: 'Kov√°cs',
      lastName: 'M√°ria',
      role: 'OWNER',
      language: 'HU',
      phone: '+36 30 333 4444',
    },
  })

  const owner3 = await prisma.user.create({
    data: {
      email: 'budapest.investment@example.com',
      password: userPassword,
      firstName: 'Budapest',
      lastName: 'Investment Kft.',
      role: 'OWNER',
      language: 'HU',
      phone: '+36 1 456 7890',
    },
  })

  const owner4 = await prisma.user.create({
    data: {
      email: 'szabo.laszlo@example.com',
      password: userPassword,
      firstName: 'Szab√≥',
      lastName: 'L√°szl√≥',
      role: 'OWNER',
      language: 'HU',
      phone: '+36 20 567 8901',
    },
  })

  // Tenants
  const tenant1 = await prisma.user.create({
    data: {
      email: 'szabo.peter@example.com',
      password: userPassword,
      firstName: 'Szab√≥',
      lastName: 'P√©ter',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 555 6666',
    },
  })

  const tenant2 = await prisma.user.create({
    data: {
      email: 'toth.anna@example.com',
      password: userPassword,
      firstName: 'T√≥th',
      lastName: 'Anna',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 777 8888',
    },
  })

  const tenant3 = await prisma.user.create({
    data: {
      email: 'horvath.janos@example.com',
      password: userPassword,
      firstName: 'Horv√°th',
      lastName: 'J√°nos',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 123 4567',
    },
  })

  const tenant4 = await prisma.user.create({
    data: {
      email: 'varga.eva@example.com',
      password: userPassword,
      firstName: 'Varga',
      lastName: '√âva',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 234 5678',
    },
  })

  const tenant5 = await prisma.user.create({
    data: {
      email: 'nemeth.gabor@example.com',
      password: userPassword,
      firstName: 'N√©meth',
      lastName: 'G√°bor',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 345 6789',
    },
  })

  const tenant6 = await prisma.user.create({
    data: {
      email: 'kiss.zsuzsanna@example.com',
      password: userPassword,
      firstName: 'Kiss',
      lastName: 'Zsuzsanna',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 456 7890',
    },
  })

  const tenant7 = await prisma.user.create({
    data: {
      email: 'olah.robert@example.com',
      password: userPassword,
      firstName: 'Ol√°h',
      lastName: 'R√≥bert',
      role: 'TENANT',
      language: 'HU',
      phone: '+36 70 567 8901',
    },
  })

  // Service providers
  const provider1 = await prisma.user.create({
    data: {
      email: 'fixit.kft@example.com',
      password: userPassword,
      firstName: 'Fix-It',
      lastName: 'Kft.',
      role: 'PROVIDER',
      language: 'HU',
      phone: '+36 20 999 0000',
    },
  })

  const provider2 = await prisma.user.create({
    data: {
      email: 'elektro.service@example.com',
      password: userPassword,
      firstName: 'Elektro',
      lastName: 'Service',
      role: 'PROVIDER',
      language: 'HU',
      phone: '+36 20 888 1111',
    },
  })

  const provider3 = await prisma.user.create({
    data: {
      email: 'tisztitas.pro@example.com',
      password: userPassword,
      firstName: 'Tiszt√≠t√°s',
      lastName: 'Pro Kft.',
      role: 'PROVIDER',
      language: 'HU',
      phone: '+36 20 777 2222',
    },
  })

  // Create owner profiles
  const ownerProfile1 = await prisma.owner.create({
    data: {
      userId: owner1.id,
      taxNumber: '87654321-1-42',
      bankAccount: '87654321-87654321-87654321',
      billingStreet: 'Pet≈ëfi utca 10.',
      billingCity: 'Budapest',
      billingPostalCode: '1052',
      billingCountry: 'Magyarorsz√°g',
    },
  })

  const ownerProfile2 = await prisma.owner.create({
    data: {
      userId: owner2.id,
      taxNumber: '11223344-1-42',
      bankAccount: '11223344-11223344-11223344',
      billingStreet: 'Kossuth t√©r 5.',
      billingCity: 'Debrecen',
      billingPostalCode: '4024',
      billingCountry: 'Magyarorsz√°g',
    },
  })

  const ownerProfile3 = await prisma.owner.create({
    data: {
      userId: owner3.id,
      taxNumber: '22334455-2-41',
      bankAccount: '22334455-22334455-22334455',
      billingStreet: 'De√°k Ferenc utca 15.',
      billingCity: 'Budapest',
      billingPostalCode: '1052',
      billingCountry: 'Magyarorsz√°g',
    },
  })

  const ownerProfile4 = await prisma.owner.create({
    data: {
      userId: owner4.id,
      taxNumber: '33445566-1-42',
      bankAccount: '33445566-33445566-33445566',
      billingStreet: 'R√°k√≥czi √∫t 25.',
      billingCity: 'Szeged',
      billingPostalCode: '6720',
      billingCountry: 'Magyarorsz√°g',
    },
  })

  // Create tenant profiles
  const tenantProfile1 = await prisma.tenant.create({
    data: {
      userId: tenant1.id,
      emergencyName: 'Szab√≥ J√°nos (√©desapa)',
      emergencyPhone: '+36 30 123 4567',
    },
  })

  const tenantProfile2 = await prisma.tenant.create({
    data: {
      userId: tenant2.id,
      emergencyName: 'T√≥th L√°szl√≥ (f√©rj)',
      emergencyPhone: '+36 30 987 6543',
    },
  })

  const tenantProfile3 = await prisma.tenant.create({
    data: {
      userId: tenant3.id,
      emergencyName: 'Horv√°th M√°ria (feles√©g)',
      emergencyPhone: '+36 30 111 2222',
    },
  })

  const tenantProfile4 = await prisma.tenant.create({
    data: {
      userId: tenant4.id,
      emergencyName: 'Varga P√©ter (testv√©r)',
      emergencyPhone: '+36 30 333 4444',
    },
  })

  const tenantProfile5 = await prisma.tenant.create({
    data: {
      userId: tenant5.id,
      emergencyName: 'N√©meth Andr√°s (bar√°t)',
      emergencyPhone: '+36 30 555 6666',
    },
  })

  const tenantProfile6 = await prisma.tenant.create({
    data: {
      userId: tenant6.id,
      emergencyName: 'Kiss Istv√°n (√©desapa)',
      emergencyPhone: '+36 30 777 8888',
    },
  })

  const tenantProfile7 = await prisma.tenant.create({
    data: {
      userId: tenant7.id,
      emergencyName: 'Ol√°h Katalin (√©desanya)',
      emergencyPhone: '+36 30 999 0000',
    },
  })

  // Create provider profiles
  const providerProfile1 = await prisma.provider.create({
    data: {
      userId: provider1.id,
      businessName: 'Fix-It Szolg√°ltat√≥ Kft.',
      specialty: ['V√≠zvezet√©k-szerel√©s', 'Villanyszerel√©s', 'F≈±t√©s-szell≈ëz√©s'],
      hourlyRate: 15000,
      currency: 'HUF',
      rating: 4.5,
      availability: {
        monday: { start: '08:00', end: '18:00' },
        tuesday: { start: '08:00', end: '18:00' },
        wednesday: { start: '08:00', end: '18:00' },
        thursday: { start: '08:00', end: '18:00' },
        friday: { start: '08:00', end: '16:00' },
      },
    },
  })

  const providerProfile2 = await prisma.provider.create({
    data: {
      userId: provider2.id,
      businessName: 'Elektro Service Budapest',
      specialty: ['Villanyszerel√©s'],
      hourlyRate: 18000,
      currency: 'HUF',
      rating: 4.8,
      availability: {
        monday: { start: '07:00', end: '19:00' },
        tuesday: { start: '07:00', end: '19:00' },
        wednesday: { start: '07:00', end: '19:00' },
        thursday: { start: '07:00', end: '19:00' },
        friday: { start: '07:00', end: '17:00' },
        saturday: { start: '08:00', end: '14:00' },
      },
    },
  })

  const providerProfile3 = await prisma.provider.create({
    data: {
      userId: provider3.id,
      businessName: 'Tiszt√≠t√°s Pro Kft.',
      specialty: ['Takar√≠t√°s'],
      hourlyRate: 8000,
      currency: 'HUF',
      rating: 4.2,
      availability: {
        monday: { start: '06:00', end: '20:00' },
        tuesday: { start: '06:00', end: '20:00' },
        wednesday: { start: '06:00', end: '20:00' },
        thursday: { start: '06:00', end: '20:00' },
        friday: { start: '06:00', end: '20:00' },
        saturday: { start: '08:00', end: '16:00' },
        sunday: { start: '10:00', end: '16:00' },
      },
    },
  })

  // Create properties with diverse data
  const property1 = await prisma.property.create({
    data: {
      ownerId: ownerProfile1.id,
      street: 'Andr√°ssy √∫t 60.',
      city: 'Budapest',
      postalCode: '1062',
      country: 'Magyarorsz√°g',
      type: 'APARTMENT',
      size: 65,
      rooms: 2,
      floor: 3,
      rentAmount: 180000,
      currency: 'HUF',
      status: 'RENTED',
      photos: [],
    },
  })

  const property2 = await prisma.property.create({
    data: {
      ownerId: ownerProfile1.id,
      street: 'V√°ci √∫t 15.',
      city: 'Budapest',
      postalCode: '1134',
      country: 'Magyarorsz√°g',
      type: 'APARTMENT',
      size: 85,
      rooms: 3,
      floor: 5,
      rentAmount: 250000,
      currency: 'HUF',
      status: 'AVAILABLE',
      photos: [],
    },
  })

  const property3 = await prisma.property.create({
    data: {
      ownerId: ownerProfile2.id,
      street: 'Bem rakpart 20.',
      city: 'Budapest',
      postalCode: '1011',
      country: 'Magyarorsz√°g',
      type: 'HOUSE',
      size: 150,
      rooms: 4,
      floor: 0,
      rentAmount: 350000,
      currency: 'HUF',
      status: 'RENTED',
      photos: [],
    },
  })

  const property4 = await prisma.property.create({
    data: {
      ownerId: ownerProfile3.id,
      street: 'K√°lvin t√©r 10.',
      city: 'Budapest',
      postalCode: '1091',
      country: 'Magyarorsz√°g',
      type: 'OFFICE',
      size: 120,
      rooms: 5,
      floor: 2,
      rentAmount: 400000,
      currency: 'HUF',
      status: 'RENTED',
      photos: [],
    },
  })

  const property5 = await prisma.property.create({
    data: {
      ownerId: ownerProfile3.id,
      street: 'Doh√°ny utca 5.',
      city: 'Budapest',
      postalCode: '1074',
      country: 'Magyarorsz√°g',
      type: 'COMMERCIAL',
      size: 200,
      rooms: 3,
      floor: 0,
      rentAmount: 600000,
      currency: 'HUF',
      status: 'AVAILABLE',
      photos: [],
    },
  })

  const property6 = await prisma.property.create({
    data: {
      ownerId: ownerProfile4.id,
      street: 'Arany J√°nos utca 8.',
      city: 'Szeged',
      postalCode: '6720',
      country: 'Magyarorsz√°g',
      type: 'APARTMENT',
      size: 75,
      rooms: 2,
      floor: 1,
      rentAmount: 120000,
      currency: 'HUF',
      status: 'RENTED',
      photos: [],
    },
  })

  const property7 = await prisma.property.create({
    data: {
      ownerId: ownerProfile4.id,
      street: 'Tisza Lajos k√∂r√∫t 25.',
      city: 'Szeged',
      postalCode: '6722',
      country: 'Magyarorsz√°g',
      type: 'APARTMENT',
      size: 45,
      rooms: 1,
      floor: 4,
      rentAmount: 90000,
      currency: 'HUF',
      status: 'AVAILABLE',
      photos: [],
    },
  })

  const property8 = await prisma.property.create({
    data: {
      ownerId: ownerProfile2.id,
      street: 'Sz√©chenyi t√©r 12.',
      city: 'Debrecen',
      postalCode: '4024',
      country: 'Magyarorsz√°g',
      type: 'APARTMENT',
      size: 95,
      rooms: 3,
      floor: 2,
      rentAmount: 160000,
      currency: 'HUF',
      status: 'MAINTENANCE',
      photos: [],
    },
  })

  // Create contracts
  const contract1 = await prisma.contract.create({
    data: {
      propertyId: property1.id,
      tenantId: tenantProfile1.id,
      startDate: new Date('2024-01-01'),
      endDate: new Date('2025-12-31'),
      rentAmount: 180000,
      deposit: 360000,
      paymentDay: 5,
    },
  })

  const contract2 = await prisma.contract.create({
    data: {
      propertyId: property3.id,
      tenantId: tenantProfile2.id,
      startDate: new Date('2024-06-01'),
      endDate: new Date('2025-05-31'),
      rentAmount: 350000,
      deposit: 700000,
      paymentDay: 1,
    },
  })

  const contract3 = await prisma.contract.create({
    data: {
      propertyId: property4.id,
      tenantId: tenantProfile3.id,
      startDate: new Date('2024-03-01'),
      endDate: new Date('2026-02-28'),
      rentAmount: 400000,
      deposit: 800000,
      paymentDay: 10,
    },
  })

  const contract4 = await prisma.contract.create({
    data: {
      propertyId: property6.id,
      tenantId: tenantProfile4.id,
      startDate: new Date('2024-09-01'),
      endDate: new Date('2025-08-31'),
      rentAmount: 120000,
      deposit: 240000,
      paymentDay: 15,
    },
  })

  const contract5 = await prisma.contract.create({
    data: {
      propertyId: property2.id,
      tenantId: tenantProfile5.id,
      startDate: new Date('2023-01-01'),
      endDate: new Date('2023-12-31'),
      rentAmount: 220000,
      deposit: 440000,
      paymentDay: 5,
    },
  })

  // Create issues with various statuses and priorities
  const issue1 = await prisma.issue.create({
    data: {
      propertyId: property1.id,
      reportedById: tenant1.id,
      title: 'Cs√∂p√∂g a csap a konyh√°ban',
      description: 'A konyhai mosogat√≥ csapja folyamatosan cs√∂p√∂g, jav√≠t√°s sz√ºks√©ges. A probl√©ma m√°r egy hete fenn√°ll.',
      category: 'PLUMBING',
      priority: 'HIGH',
      status: 'OPEN',
      photos: [],
    },
  })

  const issue2 = await prisma.issue.create({
    data: {
      propertyId: property3.id,
      reportedById: tenant2.id,
      assignedToId: providerProfile1.id,
      title: 'Nem m≈±k√∂dik a f≈±t√©s',
      description: 'A nappaliban l√©v≈ë radi√°tor nem melegszik, pedig a t√∂bbi helyis√©gben m≈±k√∂dik a f≈±t√©s. S√ºrg≈ës jav√≠t√°s sz√ºks√©ges.',
      category: 'HVAC',
      priority: 'URGENT',
      status: 'IN_PROGRESS',
      photos: [],
    },
  })

  const issue3 = await prisma.issue.create({
    data: {
      propertyId: property4.id,
      reportedById: tenant3.id,
      assignedToId: providerProfile2.id,
      title: 'Villog√≥ √©g≈ëk az irod√°ban',
      description: 'Az iroda 3-as sz√°m√∫ helyis√©g√©ben a mennyezeti vil√°g√≠t√°s folyamatosan villog.',
      category: 'ELECTRICAL',
      priority: 'MEDIUM',
      status: 'COMPLETED',
      photos: [],
    },
  })

  const issue4 = await prisma.issue.create({
    data: {
      propertyId: property6.id,
      reportedById: tenant4.id,
      title: 'Eldugult lefoly√≥ a f√ºrd≈ëszob√°ban',
      description: 'A zuhanyz√≥ lefoly√≥ja eldugult, a v√≠z nem folyik el.',
      category: 'PLUMBING',
      priority: 'HIGH',
      status: 'OPEN',
      photos: [],
    },
  })

  const issue5 = await prisma.issue.create({
    data: {
      propertyId: property1.id,
      reportedById: tenant1.id,
      assignedToId: providerProfile3.id,
      title: 'Takar√≠t√°s sz√ºks√©ges a k√∂z√∂s r√©szeken',
      description: 'A l√©pcs≈ëh√°z √©s a bej√°rat takar√≠t√°sa sz√ºks√©ges.',
      category: 'OTHER',
      priority: 'LOW',
      status: 'COMPLETED',
      photos: [],
    },
  })

  const issue6 = await prisma.issue.create({
    data: {
      propertyId: property8.id,
      reportedById: admin.id,
      title: 'V√≠zk√°r a lak√°sban',
      description: 'A szomsz√©d lak√°sb√≥l v√≠z sziv√°rgott be, teljes fel√∫j√≠t√°s sz√ºks√©ges.',
      category: 'STRUCTURAL',
      priority: 'URGENT',
      status: 'OPEN',
      photos: [],
    },
  })

  const issue7 = await prisma.issue.create({
    data: {
      propertyId: property3.id,
      reportedById: tenant2.id,
      title: 'Repedt ablak√ºveg',
      description: 'A h√°l√≥szoba ablak√ºvege megrepedt, csere sz√ºks√©ges.',
      category: 'STRUCTURAL',
      priority: 'MEDIUM',
      status: 'OPEN',
      photos: [],
    },
  })

  // Create offers
  const offer1 = await prisma.offer.create({
    data: {
      propertyId: property1.id,
      issueId: issue1.id,
      createdById: provider1.id,
      items: [
        {
          description: 'Egykaros mosogat√≥ csap csere',
          quantity: 1,
          unitPrice: 25000,
          total: 25000,
        },
        {
          description: 'Szerel√©si munkad√≠j',
          quantity: 2,
          unitPrice: 15000,
          total: 30000,
        },
        {
          description: 'Kisz√°ll√°si d√≠j',
          quantity: 1,
          unitPrice: 5000,
          total: 5000,
        },
      ],
      laborCost: 35000,
      materialCost: 25000,
      totalAmount: 60000,
      currency: 'HUF',
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
      status: 'SENT',
      notes: 'A csap teljes cser√©je sz√ºks√©ges, jav√≠t√°s nem lehets√©ges. Garanciaid≈ë: 2 √©v.',
    },
  })

  const offer2 = await prisma.offer.create({
    data: {
      propertyId: property3.id,
      issueId: issue2.id,
      createdById: provider1.id,
      items: [
        {
          description: 'Radi√°tor szelep csere',
          quantity: 1,
          unitPrice: 15000,
          total: 15000,
        },
        {
          description: 'F≈±t√©si rendszer √°tmos√°s',
          quantity: 1,
          unitPrice: 45000,
          total: 45000,
        },
        {
          description: 'Munkad√≠j',
          quantity: 4,
          unitPrice: 15000,
          total: 60000,
        },
      ],
      laborCost: 60000,
      materialCost: 60000,
      totalAmount: 120000,
      currency: 'HUF',
      validUntil: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 days
      status: 'ACCEPTED',
      notes: 'S√ºrg≈ës jav√≠t√°s. Munka befejez√©se: 3-5 munkanap.',
    },
  })

  const offer3 = await prisma.offer.create({
    data: {
      propertyId: property4.id,
      issueId: issue3.id,
      createdById: provider2.id,
      items: [
        {
          description: 'LED izz√≥ csere',
          quantity: 6,
          unitPrice: 2500,
          total: 15000,
        },
        {
          description: 'Ballaszt csere',
          quantity: 2,
          unitPrice: 8000,
          total: 16000,
        },
        {
          description: 'Villanyszerel√©si munkad√≠j',
          quantity: 2,
          unitPrice: 18000,
          total: 36000,
        },
      ],
      laborCost: 36000,
      materialCost: 31000,
      totalAmount: 67000,
      currency: 'HUF',
      validUntil: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000), // 20 days
      status: 'ACCEPTED',
      notes: 'Munka elv√©gezve. Garancia: 1 √©v az alkatr√©szekre.',
    },
  })

  const offer4 = await prisma.offer.create({
    data: {
      propertyId: property6.id,
      issueId: issue4.id,
      createdById: provider1.id,
      items: [
        {
          description: 'Dugul√°s-elh√°r√≠t√°s spir√°llal',
          quantity: 1,
          unitPrice: 25000,
          total: 25000,
        },
        {
          description: 'Lefoly√≥-tiszt√≠t√≥ szerek',
          quantity: 1,
          unitPrice: 3000,
          total: 3000,
        },
      ],
      laborCost: 25000,
      materialCost: 3000,
      totalAmount: 28000,
      currency: 'HUF',
      validUntil: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days
      status: 'SENT',
      notes: 'Gyors megold√°s, jellemz≈ëen 1-2 √≥ra alatt elv√©gezhet≈ë.',
    },
  })

  const offer5 = await prisma.offer.create({
    data: {
      propertyId: property1.id,
      issueId: issue5.id,
      createdById: provider3.id,
      items: [
        {
          description: 'L√©pcs≈ëh√°z takar√≠t√°s',
          quantity: 1,
          unitPrice: 15000,
          total: 15000,
        },
        {
          description: 'Bej√°rat takar√≠t√°s √©s felmos√°s',
          quantity: 1,
          unitPrice: 8000,
          total: 8000,
        },
        {
          description: 'Takar√≠t√≥szerek',
          quantity: 1,
          unitPrice: 2000,
          total: 2000,
        },
      ],
      laborCost: 23000,
      materialCost: 2000,
      totalAmount: 25000,
      currency: 'HUF',
      validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      status: 'ACCEPTED',
      notes: 'Heti rendszeres takar√≠t√°si szolg√°ltat√°s is k√©rhet≈ë.',
    },
  })

  // Create contract templates
  console.log('üìù Creating contract templates...')
  
  const rentalTemplate = await prisma.contractTemplate.create({
    data: {
      name: 'Lak√°sb√©rleti szerz≈ëd√©s',
      type: 'RENTAL',
      description: '√Åltal√°nos lak√°sb√©rleti szerz≈ëd√©s sablon mag√°nszem√©lyek √©s c√©gek r√©sz√©re',
      content: `LAK√ÅSB√âRLETI SZERZ≈êD√âS

Amely l√©trej√∂tt egyr√©szr≈ël
N√©v: {{tulajdonos_nev}}
Sz√ºlet√©si n√©v: {{tulajdonos_szuletesi_nev}}
Sz√ºlet√©si hely, id≈ë: {{tulajdonos_szuletesi_hely_ido}}
Anyja neve: {{tulajdonos_anyja_neve}}
Szem√©lyi igazolv√°ny sz√°ma: {{tulajdonos_szemelyi_szam}}
Lakc√≠m: {{tulajdonos_lakcim}}
mint B√©rbead√≥ (a tov√°bbiakban: B√©rbead√≥),

m√°sr√©szr≈ël
N√©v: {{berlo_nev}}
Sz√ºlet√©si n√©v: {{berlo_szuletesi_nev}}
Sz√ºlet√©si hely, id≈ë: {{berlo_szuletesi_hely_ido}}
Anyja neve: {{berlo_anyja_neve}}
Szem√©lyi igazolv√°ny sz√°ma: {{berlo_szemelyi_szam}}
Lakc√≠m: {{berlo_lakcim}}
mint B√©rl≈ë (a tov√°bbiakban: B√©rl≈ë)

k√∂z√∂tt az alul√≠rott napon √©s helyen az al√°bbi felt√©telekkel:

1. A B√âRLEM√âNY
B√©rbead√≥ b√©rbe adja, B√©rl≈ë pedig b√©rbe veszi a {{ingatlan_cim}} sz√°m alatti, {{ingatlan_alapterulet}} m¬≤ alapter√ºlet≈±, {{ingatlan_szobaszam}} szob√°s lak√°st (a tov√°bbiakban: B√©rlem√©ny).

2. A B√âRLETI JOGVISZONY ID≈êTARTAMA
A b√©rleti jogviszony {{kezdo_datum}}-t√≥l {{veg_datum}}-ig terjed≈ë hat√°rozott id≈ëre j√∂n l√©tre.

3. B√âRLETI D√çJ
A b√©rleti d√≠j √∂sszege: {{berleti_dij}} Ft/h√≥ (azaz {{berleti_dij_szoveg}} forint havonta).
A b√©rleti d√≠j minden h√≥nap {{fizetes_napja}}. napj√°ig esed√©kes.

4. KAUCI√ì
B√©rl≈ë a szerz≈ëd√©s al√°√≠r√°s√°val egyidej≈±leg {{kaucio}} Ft, azaz {{kaucio_szoveg}} forint kauci√≥t fizet B√©rbead√≥ r√©sz√©re.

5. REZSIK√ñLTS√âGEK
{{rezsi_megallpodas}}

6. A FELEK JOGAI √âS K√ñTELEZETTS√âGEI
[Tov√°bbi r√©szletek...]`,
      variables: [
        { key: 'tulajdonos_nev', label: 'Tulajdonos neve', type: 'text', required: true },
        { key: 'tulajdonos_szuletesi_nev', label: 'Tulajdonos sz√ºlet√©si neve', type: 'text', required: true },
        { key: 'tulajdonos_szuletesi_hely_ido', label: 'Tulajdonos sz√ºlet√©si hely, id≈ë', type: 'text', required: true },
        { key: 'tulajdonos_anyja_neve', label: 'Tulajdonos anyja neve', type: 'text', required: true },
        { key: 'tulajdonos_szemelyi_szam', label: 'Tulajdonos szem√©lyi sz√°ma', type: 'text', required: true },
        { key: 'tulajdonos_lakcim', label: 'Tulajdonos lakc√≠me', type: 'text', required: true },
        { key: 'berlo_nev', label: 'B√©rl≈ë neve', type: 'text', required: true },
        { key: 'berlo_szuletesi_nev', label: 'B√©rl≈ë sz√ºlet√©si neve', type: 'text', required: true },
        { key: 'berlo_szuletesi_hely_ido', label: 'B√©rl≈ë sz√ºlet√©si hely, id≈ë', type: 'text', required: true },
        { key: 'berlo_anyja_neve', label: 'B√©rl≈ë anyja neve', type: 'text', required: true },
        { key: 'berlo_szemelyi_szam', label: 'B√©rl≈ë szem√©lyi sz√°ma', type: 'text', required: true },
        { key: 'berlo_lakcim', label: 'B√©rl≈ë lakc√≠me', type: 'text', required: true },
        { key: 'ingatlan_cim', label: 'Ingatlan c√≠me', type: 'text', required: true },
        { key: 'ingatlan_alapterulet', label: 'Alapter√ºlet (m¬≤)', type: 'number', required: true },
        { key: 'ingatlan_szobaszam', label: 'Szob√°k sz√°ma', type: 'number', required: true },
        { key: 'kezdo_datum', label: 'Kezd≈ë d√°tum', type: 'date', required: true },
        { key: 'veg_datum', label: 'V√©g d√°tum', type: 'date', required: true },
        { key: 'berleti_dij', label: 'B√©rleti d√≠j (Ft)', type: 'number', required: true },
        { key: 'berleti_dij_szoveg', label: 'B√©rleti d√≠j sz√∂veggel', type: 'text', required: true },
        { key: 'fizetes_napja', label: 'Fizet√©s napja', type: 'number', required: true },
        { key: 'kaucio', label: 'Kauci√≥ √∂sszege (Ft)', type: 'number', required: true },
        { key: 'kaucio_szoveg', label: 'Kauci√≥ sz√∂veggel', type: 'text', required: true },
        { key: 'rezsi_megallpodas', label: 'Rezsi meg√°llapod√°s', type: 'text', required: true },
      ],
    },
  })

  const maintenanceTemplate = await prisma.contractTemplate.create({
    data: {
      name: 'Rendszeres karbantart√°si szerz≈ëd√©s',
      type: 'MAINTENANCE',
      description: 'Ingatlan rendszeres karbantart√°s√°ra vonatkoz√≥ szerz≈ëd√©s sablon',
      content: `KARBANTART√ÅSI SZERZ≈êD√âS

Megrendel≈ë: {{megrendelo_nev}}
C√≠m: {{megrendelo_cim}}

V√°llalkoz√≥: {{vallalkozo_nev}}
C√≠m: {{vallalkozo_cim}}

1. A SZERZ≈êD√âS T√ÅRGYA
V√°llalkoz√≥ v√°llalja a {{ingatlan_cim}} alatti ingatlan rendszeres karbantart√°s√°t.

2. KARBANTART√ÅSI FELADATOK:
{{karbantartasi_feladatok}}

3. D√çJAZ√ÅS
Havi √°tal√°nyd√≠j: {{havi_dij}} Ft + √ÅFA
Fizet√©si hat√°rid≈ë: t√°rgyh√≥ {{fizetes_napja}}. napja

4. ID≈êTARTAM
Jelen szerz≈ëd√©s {{kezdo_datum}}-t√≥l hat√°rozatlan id≈ëre sz√≥l.`,
      variables: [
        { key: 'megrendelo_nev', label: 'Megrendel≈ë neve', type: 'text', required: true },
        { key: 'megrendelo_cim', label: 'Megrendel≈ë c√≠me', type: 'text', required: true },
        { key: 'vallalkozo_nev', label: 'V√°llalkoz√≥ neve', type: 'text', required: true },
        { key: 'vallalkozo_cim', label: 'V√°llalkoz√≥ c√≠me', type: 'text', required: true },
        { key: 'ingatlan_cim', label: 'Ingatlan c√≠me', type: 'text', required: true },
        { key: 'karbantartasi_feladatok', label: 'Karbantart√°si feladatok', type: 'text', required: true },
        { key: 'havi_dij', label: 'Havi d√≠j (Ft)', type: 'number', required: true },
        { key: 'fizetes_napja', label: 'Fizet√©s napja', type: 'number', required: true },
        { key: 'kezdo_datum', label: 'Kezd≈ë d√°tum', type: 'date', required: true },
      ],
    },
  })

  const operationTemplate = await prisma.contractTemplate.create({
    data: {
      name: 'Komplett ingatlan√ºzemeltet√©si szerz≈ëd√©s',
      type: 'OPERATION',
      description: 'Teljes k√∂r≈± ingatlan√ºzemeltet√©si szolg√°ltat√°sra vonatkoz√≥ szerz≈ëd√©s',
      content: `INGATLAN√úZEMELTET√âSI SZERZ≈êD√âS

Megb√≠z√≥: {{megbizo_nev}}
√územeltet≈ë: {{uzemelteto_nev}}

1. √úZEMELTET√âSI SZOLG√ÅLTAT√ÅSOK:
- M≈±szaki √ºzemeltet√©s
- Takar√≠t√°s √©s higi√©nia
- Karbantart√°s √©s jav√≠t√°sok
- Energia menedzsment
- Biztons√°gtechnika
{{egyeb_szolgaltatasok}}

2. D√çJAZ√ÅS
√územeltet√©si d√≠j: {{uzemeltetesi_dij}} Ft/h√≥ + √ÅFA

3. TELJES√çT√âSI HAT√ÅRID≈êK
{{teljesitesi_hataridok}}`,
      variables: [
        { key: 'megbizo_nev', label: 'Megb√≠z√≥ neve', type: 'text', required: true },
        { key: 'uzemelteto_nev', label: '√územeltet≈ë neve', type: 'text', required: true },
        { key: 'egyeb_szolgaltatasok', label: 'Egy√©b szolg√°ltat√°sok', type: 'text', required: false },
        { key: 'uzemeltetesi_dij', label: '√územeltet√©si d√≠j (Ft/h√≥)', type: 'number', required: true },
        { key: 'teljesitesi_hataridok', label: 'Teljes√≠t√©si hat√°rid≈ëk', type: 'text', required: true },
      ],
    },
  })

  const mediationTemplate = await prisma.contractTemplate.create({
    data: {
      name: 'Komplett b√©rbead√°s-k√∂zvet√≠t≈ëi szerz≈ëd√©s',
      type: 'MEDIATION',
      description: 'Ingatlan b√©rbead√°s√°nak k√∂zvet√≠t√©s√©re vonatkoz√≥ megb√≠z√°si szerz≈ëd√©s',
      content: `B√âRBEAD√ÅS-K√ñZVET√çT≈êI MEGB√çZ√ÅSI SZERZ≈êD√âS

Megb√≠z√≥: {{megbizo_nev}}
K√∂zvet√≠t≈ë: {{kozvetito_nev}}

1. MEGB√çZ√ÅS T√ÅRGYA
Megb√≠z√≥ megb√≠zza K√∂zvet√≠t≈ët a {{ingatlan_cim}} alatti ingatlan b√©rbead√°s√°nak k√∂zvet√≠t√©s√©vel.

2. K√ñZVET√çT≈êI D√çJ
Sikeres k√∂zvet√≠t√©s eset√©n: {{kozvetitoi_dij_szazalek}}% + √ÅFA a havi b√©rleti d√≠jb√≥l
Fizetend≈ë: {{kozvetitoi_dij_osszeg}} Ft + √ÅFA

3. EXKLUZIVIT√ÅS
{{exkluzivitas}}

4. ID≈êTARTAM
A megb√≠z√°s {{kezdo_datum}}-t√≥l {{veg_datum}}-ig √©rv√©nyes.`,
      variables: [
        { key: 'megbizo_nev', label: 'Megb√≠z√≥ neve', type: 'text', required: true },
        { key: 'kozvetito_nev', label: 'K√∂zvet√≠t≈ë neve', type: 'text', required: true },
        { key: 'ingatlan_cim', label: 'Ingatlan c√≠me', type: 'text', required: true },
        { key: 'kozvetitoi_dij_szazalek', label: 'K√∂zvet√≠t≈ëi d√≠j (%)', type: 'number', required: true },
        { key: 'kozvetitoi_dij_osszeg', label: 'K√∂zvet√≠t≈ëi d√≠j √∂sszege', type: 'number', required: true },
        { key: 'exkluzivitas', label: 'Exkluzivit√°s felt√©telei', type: 'text', required: true },
        { key: 'kezdo_datum', label: 'Kezd≈ë d√°tum', type: 'date', required: true },
        { key: 'veg_datum', label: 'V√©g d√°tum', type: 'date', required: true },
      ],
    },
  })

  console.log('‚úÖ Database seeded successfully with comprehensive demo data!')
  console.log('\nüìä Created data summary:')
  console.log('üë• Users: 15 (1 admin, 4 owners, 7 tenants, 3 providers)')
  console.log('üè† Properties: 8 (various types and statuses)')
  console.log('üìã Contracts: 5 (active and expired)')
  console.log('üö® Issues: 7 (different priorities and statuses)')
  console.log('üí∞ Offers: 5 (various statuses)')
  console.log('üìù Contract Templates: 4 (rental, maintenance, operation, mediation)')
  console.log('\nüìß Test accounts:')
  console.log('üë®‚Äçüíº Admin: admin@molino.com / admin123')
  console.log('üèòÔ∏è  Owner: nagy.istvan@example.com / user123')
  console.log('üè† Tenant: szabo.peter@example.com / user123')
  console.log('üîß Provider: fixit.kft@example.com / user123')
  console.log('\nüåê You can now explore the application with realistic data!')
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })