// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR_ADMIN
  OFFICE_ADMIN
  OWNER
  SERVICE_MANAGER
  PROVIDER
  TENANT
}

enum Language {
  HU
  EN
  ES
}

enum PropertyType {
  APARTMENT
  HOUSE
  OFFICE
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum IssueCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  STRUCTURAL
  OTHER
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum OfferStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String    @map("name") // Use existing name column as firstName
  lastName      String    @default("")  // Add lastName with default
  role          UserRole
  language      Language  @default(HU)
  phone         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  owner         Owner?
  tenant        Tenant?
  provider      Provider?
  reportedIssues Issue[]  @relation("ReportedBy")
  managedIssues  Issue[]  @relation("ManagedBy")
  offers        Offer[]
  statusChanges IssueTimeline[]
}

model Company {
  id            String    @id @default(cuid())
  name          String
  taxNumber     String?
  bankAccount   String?
  
  // Address
  street        String?
  city          String?
  postalCode    String?
  country       String?
  
  // Settings stored as JSON
  settings      Json      @default("{}")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Owner {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Personal Info
  profilePhoto  String?
  taxNumber     String?
  bankAccount   String?
  
  // Billing Address
  billingStreet     String?
  billingCity       String?
  billingPostalCode String?
  billingCountry    String?
  
  properties    Property[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Property {
  id            String    @id @default(cuid())
  
  // Address
  street        String
  city          String
  postalCode    String?
  country       String?
  
  // Coordinates
  latitude      Float?
  longitude     Float?
  
  // Relations
  ownerId       String
  owner         Owner     @relation(fields: [ownerId], references: [id])
  currentTenantId String?
  currentTenant  Tenant?   @relation(fields: [currentTenantId], references: [id])
  
  // Details
  type          PropertyType
  size          Float?    // m²
  rooms         Int?
  floor         Int?
  rentAmount    Decimal?
  currency      String    @default("EUR")
  
  photos        String[]  // Array of URLs
  status        PropertyStatus @default(AVAILABLE)
  
  issues        Issue[]
  offers        Offer[]
  contracts     Contract[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tenant {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Emergency Contact
  emergencyName  String?
  emergencyPhone String?
  
  // Profile & Documents
  profilePhoto  String?
  documents     String[]  // Array of document URLs (ID, contracts, etc.)
  notes         String?   // Internal notes
  
  // Co-tenants relationship (self-referencing many-to-many)
  mainTenantId  String?   // If this is a co-tenant, reference to main tenant
  mainTenant    Tenant?   @relation("TenantCoTenants", fields: [mainTenantId], references: [id])
  coTenants     Tenant[]  @relation("TenantCoTenants")
  
  isActive      Boolean   @default(true)
  isPrimary     Boolean   @default(true) // Is this the primary tenant?
  
  properties    Property[]
  contracts     Contract[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Contract {
  id            String    @id @default(cuid())
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  
  templateId    String?
  template      ContractTemplate? @relation(fields: [templateId], references: [id])
  
  startDate     DateTime
  endDate       DateTime
  rentAmount    Decimal
  deposit       Decimal?
  paymentDay    Int       // 1-31
  
  // Contract content (filled template)
  content       String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ContractTemplate {
  id            String    @id @default(cuid())
  name          String
  type          ContractTemplateType
  description   String?
  
  // Template content with placeholders
  content       String    @db.Text
  
  // Variables that can be replaced in the template
  variables     Json      @default("[]") // Array of {key: string, label: string, type: string}
  
  isActive      Boolean   @default(true)
  isSystem      Boolean   @default(true) // System templates cannot be deleted
  
  contracts     Contract[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([type])
}

enum ContractTemplateType {
  RENTAL           // Bérleti szerződés
  MAINTENANCE      // Rendszeres karbantartási szerződés
  OPERATION        // Komplett ingatlanüzemeltetési szerződés
  MEDIATION        // Komplett bérbeadásközvetítői szerződés
  CUSTOM           // Egyéni sablon
}

model Provider {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Basic company info
  businessName  String
  representativeName String? // Képviselő neve
  salutation    String?    // Megszólítás (Mr./Ms./Dr.)
  
  // Contact details
  email         String?
  website       String?
  
  // Business details
  taxNumber     String?    // Adószám
  bankAccount   String?    // Bankszámlaszám
  
  // Address
  street        String?
  city          String?
  postalCode    String?
  country       String?
  
  // Photos/logo
  companyLogo   String?    // Cég logó URL
  profilePhoto  String?    // Képviselő fénykép URL
  
  // Service details
  specialty     String[]   // Array of specialties
  hourlyRate    Decimal?   // Óradíj
  travelFee     Decimal?   // Kiszállási díj per km
  currency      String     @default("EUR")
  
  // Availability stored as JSON
  availability  Json       @default("{}")
  
  rating        Float?     @default(0)
  
  assignedIssues Issue[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Issue {
  id            String    @id @default(cuid())
  ticketNumber  String    @unique @default(cuid())
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  reportedById  String
  reportedBy    User      @relation("ReportedBy", fields: [reportedById], references: [id])
  
  assignedToId  String?
  assignedTo    Provider? @relation(fields: [assignedToId], references: [id])
  
  managedById   String?
  managedBy     User?     @relation("ManagedBy", fields: [managedById], references: [id])
  
  title         String
  description   String
  category      IssueCategory
  priority      IssuePriority @default(MEDIUM)
  photos        String[]
  
  status        IssueStatus @default(OPEN)
  
  scheduledDate DateTime?
  completedDate DateTime?
  
  timeline      IssueTimeline[]
  offers        Offer[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model IssueTimeline {
  id            String    @id @default(cuid())
  
  issueId       String
  issue         Issue     @relation(fields: [issueId], references: [id])
  
  status        IssueStatus
  changedById   String
  changedBy     User      @relation(fields: [changedById], references: [id])
  notes         String?
  
  timestamp     DateTime  @default(now())
}

model Offer {
  id            String    @id @default(cuid())
  offerNumber   String    @unique @default(cuid())
  
  issueId       String?
  issue         Issue?    @relation(fields: [issueId], references: [id])
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id])
  
  items         Json      // Array of items
  laborCost     Decimal?
  materialCost  Decimal?
  totalAmount   Decimal
  currency      String    @default("EUR")
  
  validUntil    DateTime
  status        OfferStatus @default(DRAFT)
  notes         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}