generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String
  role           UserRole
  language       Language        @default(HU)
  phone          String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  managedIssues  Issue[]         @relation("ManagedBy")
  reportedIssues Issue[]         @relation("ReportedBy")
  statusChanges  IssueTimeline[]
  offers         Offer[]
  owner          Owner?
  provider       Provider?
  tenant         Tenant?
}

model Company {
  id          String   @id @default(cuid())
  name        String
  taxNumber   String?
  bankAccount String?
  street      String?
  city        String?
  postalCode  String?
  country     String?
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Owner {
  id                String     @id @default(cuid())
  userId            String     @unique
  taxNumber         String?
  bankAccount       String?
  billingStreet     String?
  billingCity       String?
  billingPostalCode String?
  billingCountry    String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id])
  properties        Property[]
}

model Property {
  id              String         @id @default(cuid())
  street          String
  city            String
  postalCode      String?
  country         String?
  latitude        Float?
  longitude       Float?
  ownerId         String
  currentTenantId String?
  type            PropertyType
  size            Float?
  rooms           Int?
  floor           Int?
  rentAmount      Decimal?
  currency        String         @default("EUR")
  photos          String[]
  status          PropertyStatus @default(AVAILABLE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contracts       Contract[]
  issues          Issue[]
  offers          Offer[]
  currentTenant   Tenant?        @relation(fields: [currentTenantId], references: [id])
  owner           Owner          @relation(fields: [ownerId], references: [id])
}

model Tenant {
  id             String     @id @default(cuid())
  userId         String     @unique
  emergencyName  String?
  emergencyPhone String?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  contracts      Contract[]
  properties     Property[]
  user           User       @relation(fields: [userId], references: [id])
}

model Contract {
  id                String            @id @default(cuid())
  propertyId        String
  tenantId          String
  startDate         DateTime
  endDate           DateTime
  rentAmount        Decimal
  deposit           Decimal?
  paymentDay        Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  attachments       Json?
  content           String?
  contractNumber    String?           @unique
  landlordSignature String?
  landlordSigned    Boolean           @default(false)
  landlordSignedAt  DateTime?
  pdfUrl            String?
  status            ContractStatus    @default(DRAFT)
  templateId        String?
  tenantSignature   String?
  tenantSigned      Boolean           @default(false)
  tenantSignedAt    DateTime?
  title             String?
  variables         Json?
  property          Property          @relation(fields: [propertyId], references: [id])
  template          ContractTemplate? @relation(fields: [templateId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
}

model ContractTemplate {
  id          String                   @id @default(cuid())
  name        String
  description String?
  category    ContractTemplateCategory @default(RENTAL)
  title       String
  content     String
  variables   Json
  isActive    Boolean                  @default(true)
  isDefault   Boolean                  @default(false)
  language    Language                 @default(HU)
  usageCount  Int                      @default(0)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  contracts   Contract[]
}

model Provider {
  id             String   @id @default(cuid())
  userId         String   @unique
  businessName   String
  specialty      String[]
  hourlyRate     Decimal?
  currency       String   @default("EUR")
  availability   Json     @default("{}")
  rating         Float?   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignedIssues Issue[]
  user           User     @relation(fields: [userId], references: [id])
}

model Issue {
  id            String          @id @default(cuid())
  ticketNumber  String          @unique @default(cuid())
  propertyId    String
  reportedById  String
  assignedToId  String?
  managedById   String?
  title         String
  description   String
  category      IssueCategory
  priority      IssuePriority   @default(MEDIUM)
  photos        String[]
  status        IssueStatus     @default(OPEN)
  scheduledDate DateTime?
  completedDate DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assignedTo    Provider?       @relation(fields: [assignedToId], references: [id])
  managedBy     User?           @relation("ManagedBy", fields: [managedById], references: [id])
  property      Property        @relation(fields: [propertyId], references: [id])
  reportedBy    User            @relation("ReportedBy", fields: [reportedById], references: [id])
  timeline      IssueTimeline[]
  offers        Offer[]
}

model IssueTimeline {
  id          String      @id @default(cuid())
  issueId     String
  status      IssueStatus
  changedById String
  notes       String?
  timestamp   DateTime    @default(now())
  changedBy   User        @relation(fields: [changedById], references: [id])
  issue       Issue       @relation(fields: [issueId], references: [id])
}

model Offer {
  id           String      @id @default(cuid())
  offerNumber  String      @unique @default(cuid())
  issueId      String?
  propertyId   String
  createdById  String
  items        Json
  laborCost    Decimal?
  materialCost Decimal?
  totalAmount  Decimal
  currency     String      @default("EUR")
  validUntil   DateTime
  status       OfferStatus @default(DRAFT)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    User        @relation(fields: [createdById], references: [id])
  issue        Issue?      @relation(fields: [issueId], references: [id])
  property     Property    @relation(fields: [propertyId], references: [id])
}

model Transaction {
  id              String              @id
  type            TransactionType
  category        TransactionCategory
  amount          Decimal
  currency        String              @default("HUF")
  description     String
  status          TransactionStatus   @default(PENDING)
  propertyId      String?
  contractId      String?
  issueId         String?
  offerId         String?
  transactionDate DateTime            @default(now())
  dueDate         DateTime?
  paidDate        DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime
}

enum UserRole {
  ADMIN
  EDITOR_ADMIN
  OFFICE_ADMIN
  OWNER
  SERVICE_MANAGER
  PROVIDER
  TENANT
}

enum Language {
  HU
  EN
  ES
}

enum PropertyType {
  APARTMENT
  HOUSE
  OFFICE
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum IssueCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  STRUCTURAL
  OTHER
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum OfferStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURES
  TENANT_SIGNED
  FULLY_SIGNED
  ACTIVE
  EXPIRED
  TERMINATED
  CANCELLED
}

enum ContractTemplateCategory {
  RENTAL
  COMMERCIAL
  SUBLEASE
  SEASONAL
  STUDENT
  CORPORATE
  OTHER
}

enum TransactionCategory {
  RENT
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAX
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}
