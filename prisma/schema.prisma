// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR_ADMIN
  OFFICE_ADMIN
  OWNER
  SERVICE_MANAGER
  PROVIDER
  TENANT
}

enum Language {
  HU
  EN
  ES
}

enum PropertyType {
  APARTMENT
  HOUSE
  OFFICE
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum IssueCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  STRUCTURAL
  OTHER
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum OfferStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String    @map("name") // Use existing name column as firstName
  lastName      String    @default("")  // Add lastName with default
  role          UserRole
  language      Language  @default(HU)
  phone         String?
  isActive      Boolean   @default(true)
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  owner         Owner?
  tenant        Tenant?
  provider      Provider?
  reportedIssues Issue[]  @relation("ReportedBy")
  managedIssues  Issue[]  @relation("ManagedBy")
  offers        Offer[]
  statusChanges IssueTimeline[]
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  website       String?
  logo          String?
  taxNumber     String?
  bankAccount   String?
  
  // Address
  street        String?
  city          String?
  postalCode    String?
  country       String?
  
  // Settings stored as JSON
  settings      Json      @default("{}")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Owner {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Personal Info
  profilePhoto  String?
  taxNumber     String?
  bankAccount   String?
  
  // Billing Address
  billingStreet     String?
  billingCity       String?
  billingPostalCode String?
  billingCountry    String?
  
  properties    Property[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Property {
  id            String    @id @default(cuid())
  
  // Address
  street        String
  city          String
  postalCode    String?
  country       String?
  
  // Coordinates
  latitude      Float?
  longitude     Float?
  
  // Relations
  ownerId       String
  owner         Owner     @relation(fields: [ownerId], references: [id])
  currentTenantId String?
  currentTenant  Tenant?   @relation(fields: [currentTenantId], references: [id])
  
  // Details
  type          PropertyType
  size          Float?    // m²
  rooms         Int?
  floor         Int?
  rentAmount    Decimal?
  currency      String    @default("EUR")
  
  photos        String[]  // Array of URLs
  status        PropertyStatus @default(AVAILABLE)
  
  issues        Issue[]
  offers        Offer[]
  contracts     Contract[]
  providers     PropertyProvider[]
  ratings       ProviderRating[]
  invoices      Invoice[]
  bookings      Booking[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tenant {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Emergency Contact
  emergencyName  String?
  emergencyPhone String?
  
  // Profile & Documents
  profilePhoto  String?
  documents     String[]  // Array of document URLs (ID, contracts, etc.)
  notes         String?   // Internal notes
  
  // Co-tenants relationship (self-referencing many-to-many)
  mainTenantId  String?   // If this is a co-tenant, reference to main tenant
  mainTenant    Tenant?   @relation("TenantCoTenants", fields: [mainTenantId], references: [id])
  coTenants     Tenant[]  @relation("TenantCoTenants")
  
  isActive      Boolean   @default(true)
  isPrimary     Boolean   @default(true) // Is this the primary tenant?
  
  properties    Property[]
  contracts     Contract[]
  invoices      Invoice[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Contract {
  id            String    @id @default(cuid())
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  
  templateId    String?
  template      ContractTemplate? @relation(fields: [templateId], references: [id])
  
  startDate     DateTime
  endDate       DateTime
  rentAmount    Decimal
  deposit       Decimal?
  paymentDay    Int       // 1-31
  
  // Contract content (filled template)
  content       String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ContractTemplate {
  id            String    @id @default(cuid())
  name          String
  type          ContractTemplateType
  description   String?
  
  // Template content with placeholders
  content       String    @db.Text
  
  // Variables that can be replaced in the template
  variables     Json      @default("[]") // Array of {key: string, label: string, type: string}
  
  isActive      Boolean   @default(true)
  isSystem      Boolean   @default(true) // System templates cannot be deleted
  
  contracts     Contract[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([type])
}

enum ContractTemplateType {
  RENTAL           // Bérleti szerződés
  MAINTENANCE      // Rendszeres karbantartási szerződés
  OPERATION        // Komplett ingatlanüzemeltetési szerződés
  MEDIATION        // Komplett bérbeadásközvetítői szerződés
  CUSTOM           // Egyéni sablon
}

model Provider {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  
  // Basic company info
  businessName  String
  representativeName String? // Képviselő neve
  salutation    String?    // Megszólítás (Mr./Ms./Dr.)
  
  // Contact details
  email         String?
  website       String?
  
  // Business details
  taxNumber     String?    // Adószám
  bankAccount   String?    // Bankszámlaszám
  
  // Address
  street        String?
  city          String?
  postalCode    String?
  country       String?
  
  // Photos/logo
  companyLogo   String?    // Cég logó URL
  profilePhoto  String?    // Képviselő fénykép URL
  
  // Service details
  specialty     String[]   // Array of specialties
  hourlyRate    Decimal?   // Óradíj
  travelFee     Decimal?   // Kiszállási díj per km
  currency      String     @default("EUR")
  
  // Availability stored as JSON
  availability  Json       @default("{}")
  
  rating        Float?     @default(0)
  
  // Matching algorithm fields
  maxRadius     Int?       @default(50) // Maximum kiszállási távolság km-ben
  responseTime  Int?       @default(24) // Válaszadási idő órákban
  isPreferred   Boolean    @default(false) // Preferált szolgáltató-e
  
  assignedIssues Issue[]
  propertyAssignments PropertyProvider[]
  ratings       ProviderRating[]
  slaTrackings  SLATracking[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Issue {
  id            String    @id @default(cuid())
  ticketNumber  String    @unique @default(cuid())
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  reportedById  String
  reportedBy    User      @relation("ReportedBy", fields: [reportedById], references: [id])
  
  assignedToId  String?
  assignedTo    Provider? @relation(fields: [assignedToId], references: [id])
  
  managedById   String?
  managedBy     User?     @relation("ManagedBy", fields: [managedById], references: [id])
  
  title         String
  description   String
  category      IssueCategory
  priority      IssuePriority @default(MEDIUM)
  photos        String[]
  
  status        IssueStatus @default(OPEN)
  
  scheduledDate DateTime?
  completedDate DateTime?
  
  timeline      IssueTimeline[]
  offers        Offer[]
  ratings       ProviderRating[]
  slaTracking   SLATracking?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model IssueTimeline {
  id            String    @id @default(cuid())
  
  issueId       String
  issue         Issue     @relation(fields: [issueId], references: [id])
  
  status        IssueStatus
  changedById   String
  changedBy     User      @relation(fields: [changedById], references: [id])
  notes         String?
  
  timestamp     DateTime  @default(now())
}

model Offer {
  id            String    @id @default(cuid())
  offerNumber   String    @unique @default(cuid())
  
  issueId       String?
  issue         Issue?    @relation(fields: [issueId], references: [id])
  
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id])
  
  items         Json      // Array of items
  laborCost     Decimal?
  materialCost  Decimal?
  totalAmount   Decimal
  currency      String    @default("EUR")
  
  // Dinamikus árazás
  dynamicPricing Json?     // {modifiers: string[], adjustment: number, basePrice: number, applied: boolean}
  
  validUntil    DateTime
  status        OfferStatus @default(DRAFT)
  notes         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Ingatlan-szolgáltató kapcsolatok (automatikus párosításhoz)
model PropertyProvider {
  id          String    @id @default(cuid())
  propertyId  String
  providerId  String
  
  property    Property  @relation(fields: [propertyId], references: [id])
  provider    Provider  @relation(fields: [providerId], references: [id])
  
  // Kapcsolat jellege
  isPrimary   Boolean   @default(false) // Elsődleges szolgáltató-e
  categories  String[]  // Milyen kategóriákban dolgozik (IssueCategory értékek)
  
  // Teljesítmény adatok
  avgResponseTime Int?  // Átlagos válaszidő órákban
  completionRate  Float? @default(0) // Befejezési arány (0-100%)
  rating         Float? @default(0) // Értékelés (1-5)
  
  // Státusz
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([propertyId, providerId])
}

// Szolgáltató értékelési rendszer
model ProviderRating {
  id          String    @id @default(cuid())
  providerId  String
  issueId     String?   // Melyik hibabejelentéshez kapcsolódik
  propertyId  String
  
  provider    Provider  @relation(fields: [providerId], references: [id])
  issue       Issue?    @relation(fields: [issueId], references: [id])
  property    Property  @relation(fields: [propertyId], references: [id])
  
  // Értékelés részletei
  rating      Int       // 1-5 skálán
  quality     Int?      // Munka minősége (1-5)
  timeliness  Int?      // Időben teljesítés (1-5)
  communication Int?    // Kommunikáció (1-5)
  price       Int?      // Ár-érték arány (1-5)
  
  comment     String?   // Szöveges értékelés
  
  // Metaadatok
  ratedById   String?   // Ki értékelte (user id)
  isVerified  Boolean   @default(false) // Ellenőrzött értékelés-e
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// SLA teljesítmény követés
model SLATracking {
  id          String      @id @default(cuid())
  issueId     String      @unique
  providerId  String?
  
  issue       Issue       @relation(fields: [issueId], references: [id])
  provider    Provider?   @relation(fields: [providerId], references: [id])
  
  // SLA határidők
  targetResponseTime Int // Cél válaszidő órákban
  targetResolutionTime Int // Cél megoldási idő órákban
  
  // Tényleges teljesítés
  actualResponseTime Int? // Tényleges válaszidő órákban
  actualResolutionTime Int? // Tényleges megoldási idő órákban
  
  // Státusz
  responseBreached Boolean @default(false) // Válaszidő túllépve
  resolutionBreached Boolean @default(false) // Megoldási idő túllépve
  
  // Eszkaláció
  escalationLevel Int @default(0) // 0=nincs, 1=első, 2=második, stb.
  escalatedAt DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Számlázás - Zoho Books integráció
model Invoice {
  id                    String    @id @default(cuid())
  
  // Kapcsolatok
  tenantId              String
  tenant                Tenant    @relation(fields: [tenantId], references: [id])
  
  propertyId            String  
  property              Property  @relation(fields: [propertyId], references: [id])
  
  // Számla adatok
  amount                Decimal
  currency              String    @default("EUR")
  dueDate               DateTime
  description           String?
  invoiceType           InvoiceType @default(RENTAL)
  status                InvoiceStatus @default(PENDING)
  
  // Zoho Books integráció
  externalInvoiceId     String?   @unique // Zoho invoice ID
  externalInvoiceNumber String?   // Zoho invoice number
  externalInvoiceUrl    String?   // Zoho invoice URL
  externalPdfUrl        String?   // Zoho PDF URL
  
  // Fizetési adatok
  paidAt                DateTime?
  paymentMethod         String?
  paymentReference      String?
  
  // Spanyol specifikus mezők
  vatRate               Decimal?  @default(21) // Spanish VAT rate
  vatAmount             Decimal? // VAT amount
  netAmount             Decimal? // Amount without VAT
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([tenantId])
  @@index([propertyId])
  @@index([status])
  @@index([dueDate])
}

enum InvoiceType {
  RENTAL      // Bérleti díj
  MAINTENANCE // Karbantartás
  DEPOSIT     // Óvadék
  UTILITIES   // Közüzemi díj
  OTHER       // Egyéb
}

enum InvoiceStatus {
  PENDING     // Függőben
  SENT        // Elküldve
  VIEWED      // Megtekintve
  PAID        // Kifizetve
  OVERDUE     // Lejárt
  CANCELLED   // Visszavonva
}

// Rövid távú bérlések - Booking.com, Airbnb integráció
model Booking {
  id                String    @id @default(cuid())
  
  // Külső platform adatok
  externalId        String    @unique // Booking.com reservation ID
  platform          BookingPlatform @default(BOOKING_COM)
  
  // Kapcsolatok
  propertyId        String?
  property          Property? @relation(fields: [propertyId], references: [id])
  
  // Vendég adatok
  guestName         String
  guestEmail        String?
  guestPhone        String?
  guestCountry      String?
  
  // Foglalási adatok
  checkIn           DateTime
  checkOut          DateTime
  nights            Int
  adults            Int
  children          Int       @default(0)
  
  // Pénzügyi adatok
  totalAmount       Decimal
  currency          String    @default("EUR")
  commission        Decimal?  // Platform províziója
  netAmount         Decimal?  // Nettó bevétel
  
  // Státusz és metaadatok
  status            BookingStatus @default(CONFIRMED)
  bookedAt          DateTime
  cancelledAt       DateTime?
  
  // További adatok
  specialRequests   String?
  guestComments     String?
  arrivalTime       String?
  cancellationPolicy String?
  
  // Platform specifikus adatok (JSON)
  platformData      Json?     // Extra platform-specific data
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([platform])
  @@index([status])
  @@index([checkIn])
  @@index([checkOut])
  @@index([propertyId])
}

enum BookingPlatform {
  BOOKING_COM     // Booking.com
  AIRBNB          // Airbnb
  UPLISTING       // Uplisting.io
  DIRECT          // Közvetlen foglalás
  OTHER           // Egyéb platform
}

enum BookingStatus {
  CONFIRMED       // Megerősített
  CANCELLED       // Lemondott
  MODIFIED        // Módosított
  NO_SHOW         // Nem jelent meg
  CHECKED_IN      // Bejelentkezett
  CHECKED_OUT     // Kijelentkezett
}

// Automatikus párosítási napló
model ReconciliationLog {
  id                  String    @id @default(cuid())
  
  // Feldolgozási adatok
  processedAt         DateTime  @default(now())
  contractsChecked    Int       // Ellenőrzött szerződések száma
  transactionsMatched Int       // Párosított tranzakciók száma
  autoReconciled      Int       // Automatikusan párosított
  invoicesUpdated     Int       // Frissített számlák
  notificationsSent   Int       // Küldött értesítések
  errors              Int       // Hibák száma
  
  // Részletes összefoglaló (JSON)
  summary             Json?     // Detailed reconciliation results
  
  // Metadata
  executionTime       Int?      // Execution time in milliseconds
  triggerType         String    @default("cron") // cron, manual, webhook
  
  createdAt           DateTime  @default(now())
  
  @@index([processedAt])
  @@index([autoReconciled])
}